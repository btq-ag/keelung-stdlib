module Test.Hash.Poseidon where

import Hash.Poseidon qualified as Poseidon
import Keelung
import Test.Tasty
import Test.Tasty.HUnit

tests :: TestTree
tests =
  testGroup
    "Interpreted"
    [ testCase "1" $ run [1] [18586133768512220936620570745912940619677854269274689475585506675881198879027],
      testCase "2" $ run [42] [12326503012965816391338144612242952408728683609716147019497703475006801258307],
      testCase "3" $ run [1, 2] [7853200120776062878684798364095072458815029376092732009249414926327459813530],
      testCase "4" $ run [1, 2, 3] [6542985608222806190361240322586112750744169038454362455181422643027100751666],
      testCase "5" $ run [1, 2, 3, 4] [18821383157269793795438455681495246036402687001665670618754263018637548127333],
      testCase "6" $ run [1, 2, 3, 4, 5] [6183221330272524995739186171720101788151706631170188140075976616310159254464],
      testCase "7" $ run [1, 2, 0, 0, 0] [1018317224307729531995786483840663576608797660851238720571059489595066344487],
      testCase "8" $ run [3, 4, 0, 0, 0] [5811595552068139067952687508729883632420015185677766880877743348592482390548],
      testCase "9" $ run [1, 2, 3, 4, 5, 6] [20400040500897583745843009878988256314335038853985262692600694741116813247201],
      testCase "10" $ run [1, 2, 0, 0, 0, 0] [15336558801450556532856248569924170992202208561737609669134139141992924267169],
      testCase "11" $ run [3, 4, 0, 0, 0, 0] [12263118664590987767234828103155242843640892839966517009184493198782366909018]
    ]
  where
    run :: [Integer] -> [Integer] -> Assertion
    run inputs expected = do
      actual <- interpret bn128 (Poseidon.hash (map fromInteger inputs)) [] []
      actual @?= expected
